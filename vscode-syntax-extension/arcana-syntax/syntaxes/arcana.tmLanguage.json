{
  "name": "ArcanaScript",
  "scopeName": "source.arcana",
  "fileTypes": [
    "arcx"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#decorators"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.arcana",
          "match": "//.*$"
        },
        {
          "name": "comment.block.arcana",
          "begin": "#!",
          "end": "!#",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.comment.begin.arcana" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.comment.end.arcana" }
          },
          "contentName": "comment.block.arcana"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.arcana",
          "match": "\\b(if|elif|else|switch|case|safeguard|do|while|for|in|try|on|after|class|interface|enum|using|is|this|super|from|return|break|continue|throw|catch|finally)\\b"
        },
        {
          "name": "keyword.other.arcana",
          "match": "\\b(const|let|var|static|final|abstract|virtual|override|public|private|protected|internal)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.arcana",
          "match": "\\b(char|int|double|float|byte|boolean|long|short|void|any|never)\\b"
        },
        {
          "name": "support.class.arcana",
          "match": "\\b(Function<\\w+>|Class|Integer|Double|Float|String|Array|Object|Promise|Error)\\b"
        },
        {
          "name": "meta.type.annotation.arcana",
          "match": "\\w+\\s*:\\s*(\\w+)",
          "captures": {
            "1": { "name": "storage.type.arcana" }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.arcana",
          "match": "^(\\w+)\\s*:\\s*(Function<\\w+>)\\s*=\\s*\\(\\)\\s*\\{",
          "captures": {
            "1": { "name": "entity.name.function.arcana" },
            "2": { "name": "storage.type.function.arcana" }
          }
        },
        {
          "name": "meta.function-call.arcana",
          "match": "\\b(\\w+)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.arcana" }
          }
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.declaration.arcana",
          "match": "^(\\s*)(class)\\s+(\\w+)",
          "captures": {
            "2": { "name": "storage.type.class.arcana" },
            "3": { "name": "entity.name.type.class.arcana" }
          }
        },
        {
          "name": "meta.class.inheritance.arcana",
          "match": "class\\s+(\\w+)\\s+is\\s+(\\w+)(?:,\\s*(\\w+))*\\s+using\\s+(\\w+)",
          "captures": {
            "1": { "name": "entity.name.type.class.main.arcana" },
            "2": { "name": "entity.name.type.class.primary-parent.arcana" },
            "3": { "name": "entity.name.type.class.secondary-parent.arcana" },
            "4": { "name": "entity.name.type.interface.arcana" }
          }
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
          "name": "meta.decorator.arcana",
          "match": "@(\\w+)",
          "captures": {
            "1": { "name": "entity.name.function.decorator.arcana" }
          }
        },
        {
          "name": "storage.modifier.arcana",
          "match": "@(exposed|hidden|shielded|fixed|overrides|import|export)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.arcana",
          "match": "(\\+|\\-|\\*\\*|\\*|/|--|\\+\\+|%)"
        },
        {
          "name": "keyword.operator.comparison.arcana",
          "match": "(==|===|!=|!==|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.assignment.arcana",
          "match": "(=|\\+=|\\-=|\\*=|\\*=|/=|\\^=|&=|\\|=|>>=|<<=|\\^&=|\\^\\|=|%=)"
        },
        {
          "name": "keyword.operator.binary.arcana",
          "match": "(!|&|\\||>>|<<|\\^&|\\^\\||~)"
        },
        {
          "name": "keyword.operator.logical.arcana",
          "match": "(&&|\\|\\||!)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.arcana",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.arcana",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.arcana",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.arcana",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.arcana",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.arcana",
          "match": "\\b\\d+\\.\\d+\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.arcana",
          "match": ";"
        },
        {
          "name": "punctuation.separator.arcana",
          "match": ","
        },
        {
          "name": "punctuation.definition.block.begin.arcana",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.block.end.arcana",
          "match": "\\}"
        }
      ]
    }
  },
  "scope": "source.arcana"
}